--[[
Weapon reload moved from engine to Lua, making mags mods should be easier now    
GitHub: https://github.com/RynerNO
Copyright (C) 2022 RynerNO
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 Unported License
https://creativecommons.org/licenses/by-nc-sa/4.0/
--]]

-- "enum" of weapon states from engine that I will need
local EWeaponStates = {
        eIdle = 0,
		eShowing = 1,
		eReload = 6,
		eMisfire = 8,
		eMagEmpty = 9,		
}

function on_game_start()
	RegisterScriptCallback("actor_on_hud_animation_end", actor_on_hud_animation_end)
    RegisterScriptCallback("actor_on_weapon_lower", actor_on_weapon_lower)
end


local reloadWpn = nil
local sndObj = nil


--disable reloading, weapons like grenade launchers or some shotguns are not affected
local disable = false
function reload(binder, wpn, isJammed)
    if(disable) then return end
    rynerno_helper.log(isJammed)
    if(isJammed) then
        wpn:switch_state(EWeaponStates.eReload)
        wpn:switch_state(EWeaponStates.eIdle)
        return true
    end
    if(wpn:get_state() == EWeaponStates.eReload) then return end;
    local ammoElapsed = wpn:get_ammo_in_magazine();
    local magSize = tonumber(ini_sys:r_string_ex(wpn:section(), "ammo_mag_size"))
    local avaliableAmmo = getAmmo(wpn)

    if (avaliableAmmo == nil) then
        return false
    end
    if(ammoElapsed == magSize) then
        return true
    end
    reloadWpn = wpn
    rynerno_helper.log('START RELOAD')
    wpn:switch_state(EWeaponStates.eReload)
    playReloadAnim(wpn, ammoElapsed)
    

end

function getAmmo(wpn)
    if not (wpn) or (not IsWeapon(wpn)) then return end
    local ammo_list = str_explode(ini_sys:r_string_ex(wpn:section(), "ammo_class"), ",");
    local section_index = tonumber(wpn:get_ammo_type()) + 1;
    local ammo = findAmmo(ammo_list[section_index])
    if(ammo == nil) then
        for i=1, #ammo_list do
            if(not (i == section_index)) then
                ammo = findAmmo(ammo_list[i])
            end
            if(ammo) then break end;
        end
    end
    return ammo;
end

function findAmmo(sec)
	if not (sec) then return end
	local ammo = nil
	local function itr(a, item)
		if(item and IsAmmo(item) and item:section() == sec) then
            if(ammo == nil) then
                ammo = {}
            end
			table.insert(ammo, item)
		end
	end
	db.actor:iterate_inventory(itr, true)
	return ammo
end

function playReloadAnim(wpn, ammoElapsed) 
    local magSize = tonumber(ini_sys:r_string_ex(wpn:section(), "ammo_mag_size"))
    -- Reload for double barell shotgun
    if(magSize == 2) then 
        if(ammoElapsed == 1) then
            wpn:play_hud_motion("anm_reload_1", true, wpn:get_state(), 1, 0)
            local snd_reload = ini_sys:r_string_ex(wpn:section(), "snd_reload_1")
            sndObj = play_sound(snd_reload, wpn)
            return nil
        else 
            wpn:play_hud_motion("anm_reload_2", true, wpn:get_state(), 1, 0)
            local snd_reload = ini_sys:r_string_ex(wpn:section(), "snd_reload")
            sndObj = play_sound(snd_reload, wpn)
            return nil
        end
    end
    if(ammoElapsed == 0) then
        wpn:play_hud_motion("anm_reload_empty", true, 3, 1, 0)
        local snd_reload = ini_sys:r_string_ex(wpn:section(), "snd_reload_empty") or ini_sys:r_string_ex(wpn:section(), "snd_reload")
        sndObj = play_sound(snd_reload, wpn)
       
     else 
        wpn:play_hud_motion("anm_reload", true, 3, 1, 0)
        local snd_reload = ini_sys:r_string_ex(wpn:section(), "snd_reload")
        sndObj = play_sound(snd_reload, wpn)
    end    
end

function completeReload(wpn)
    local ammoElapsed = wpn:get_ammo_in_magazine();
    local magSize = tonumber(ini_sys:r_string_ex(wpn:section(), "ammo_mag_size"))
    local avaliableAmmo = getAmmo(wpn)
    

    if (avaliableAmmo == nil) then
        return true 
    end
    local ammo_list = str_explode(ini_sys:r_string_ex(wpn:section(), "ammo_class"), ",");
    local section_index = tonumber(wpn:get_ammo_type()) + 1;
    local ammoNeed = 0
    if(ammo_list[section_index] == avaliableAmmo[1]:section()) then
        ammoNeed = magSize - ammoElapsed;
    else
        ammoNeed = magSize
        wpn:unload_magazine(true)
    end

    for i=1,#avaliableAmmo do
        if(ammoNeed == 0) then
            break;
        end
        local ammoCount = avaliableAmmo[i]:ammo_get_count();
        if(ammoNeed >= ammoCount) then
            ammoNeed = ammoNeed - ammoCount
            alife_release_id(avaliableAmmo[i]:id())
            
        else
            avaliableAmmo[i]:ammo_set_count(ammoCount - ammoNeed)
            ammoNeed = 0
            break
        end
    end
    local ammo_list = str_explode(ini_sys:r_string_ex(wpn:section(), "ammo_class"), ",");
    local newAmmoType = rynerno_helper.indexOf(ammo_list, avaliableAmmo[1]:section());
    wpn:set_ammo_type(newAmmoType - 1);
    if(ammoNeed == 0) then 
        wpn:set_ammo_elapsed(magSize) 
    else 
        wpn:set_ammo_elapsed(magSize - ammoNeed)
    end

end


function actor_on_hud_animation_end(item,section,motion,state,slot)
	
	if(snd_obj) then 
        snd_obj:stop()
    end
    -- Check if item is weapon
	if not (IsWeapon(item))	then return end
	-- Check for reload state
    if (not reloadWpn or reloadWpn:id() ~= item:id()) then return end
    if(item:get_state() ~= EWeaponStates.eReload) then return end
	completeReload(item)
	rynerno_helper.log('RELOADING FINISHED')

end


function actor_on_weapon_lower()
    if(snd_obj) then 
        snd_obj:stop()
    end
end

-- changed play sound from utils_obj
function play_sound(path, wpn)
	snd_obj = nil
    if(not wpn) then return end
	if (not path) or (type(path) ~= "string") then return end
	
	snd_obj = sound_object(path)
	if snd_obj then
		snd_obj:play(wpn, 0, sound_object.s2d)
		snd_obj.volume = 1
        return snd_obj
	end
end